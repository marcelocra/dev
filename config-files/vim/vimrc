" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
"
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'
"
" In your plugin paths, make sure you use single quotes.
"
" 
" Plugin example usage:
"
"   " Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
"   Plug 'junegunn/vim-easy-align'
"
"   " Multiple Plug commands can be written in a single line using | separators
"   Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
"
"   " On-demand loading
"   Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
"
"   " Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
"   Plug 'fatih/vim-go', { 'tag': '*' }
"   Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }
"
"   " Plugin outside ~/.vim/plugged with post-update hook
"   Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
"   Plug 'junegunn/fzf.vim'
"
" Previously used plugins, to keep in mind:
"
"   " Allows one to easily traverse files.
"   Plug 'Lokaltog/vim-easymotion'
"
"   " JavaScript stuff.
"   Plug 'dense-analysis/ale'
"   Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
"   Plug 'ternjs/tern_for_vim', { 'do': 'yarn install' }
"
"   " Makes commenting easier on Vim.
"   Plug 'scrooloose/nerdcommenter'
"
"   " Colorschemes
"   Plug 'altercation/vim-colors-solarized'
"   Plug 'sjl/badwolf'
"   Plug 'tomasr/molokai'
"   Plug 'tpope/vim-vividchalk'
"   Plug 'marcelocra/vim-colorscheme'


" -- [ Install plugins and initialize the plugin system ] ----------------------

call plug#begin()  

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'

Plug 'bling/vim-airline'

Plug 'justinmk/vim-sneak'

" Plugins for Clojure and other lisps.
Plug 'Olical/conjure', { 'for': ['clojure'] }
Plug 'guns/vim-sexp', { 'for': ['clojure'] } 
Plug 'tpope/vim-sexp-mappings-for-regular-people', { 'for': ['clojure'] } 


call plug#end()

lua << LUACODE

  print("init.vim loaded!")

LUACODE


" -- [ Settings ] --------------------------------------------------------------

" Syntax highlighting.
syntax enable

" When inserting a tab in the beggining of the line, it will be N spaces long
" and a backspace will go back N spaces also (where N is the chosen number).
set smarttab
set shiftwidth=2
set tabstop=2

" Use spaces instead of tabs.
set expandtab

" Automatically insert a linebreak after the selected width.
"set textwidth=0   " No line breaks for me.
"set wrapmargin=0  " I really don't want you to wrap, Vim.
"set nowrap  " Don't wrap lines.

" Indentation.
set autoindent

" Disable annoying error noise (now it blinks).
set vb t_vb=

" Lines with number and with a particular width (no variation when
" increasing).
set number
set relativenumber 

" Show line and column.
set ruler
set colorcolumn=80

" Highlight search matches as you type.
set hlsearch
set incsearch

" Always show the status line.
set laststatus=2

" Use utf-8 encoding.
set encoding=utf-8

" Change tab and trail characters.
set listchars=eol:$,tab:»-,trail:.,extends:>,precedes:<,nbsp:_
" set listchars=eol:¬,tab:»˽,trail:~,extends:>,precedes:<,nbsp:_

" Highlight the cursor line.
set cursorline

" Allow backspace to work like in every text editor.
set backspace=2

" Visual autocomplete for command menu.
set wildmenu

" Redraw only when needed to.
set lazyredraw

" Change Vim default splits (to bottom right).
set splitbelow
set splitright

" Set line endings using Unix style.
set fileformats=unix

" Set proper colors.
set t_Co=256

" Avoid folding. Note: 'za' to unfold.
set nofoldenable

" My new favourite preeinstalled theme.
colorscheme koehler

" Set how the status line will be shown in the bottom of Vim.
" (not needed if using airline)
"set statusline=%<%F\ %m%r%h\ %=lines:%l/%L\ col:%c%V

" Use the system clipboard to copy to/from.
set clipboard+=unnamedplus


" -- [ Mappings ] --------------------------------------------------------------

" Use normal regex.
nnoremap / /\v\c
vnoremap / /\v\c

" Simpler way to go to command mode from insert mode.
inoremap jf <esc>
inoremap fj <esc>

" Quicker window movement.
nnoremap <c-j> <c-w><c-j>
nnoremap <c-k> <c-w><c-k>
nnoremap <c-h> <c-w><c-h>
nnoremap <c-l> <c-w><c-l>

" Move vertically by visual line (not jumping long lines).
nnoremap j gj
nnoremap k gk

" Highlight last inserted text.
nnoremap gV `[v`]

" Allow fast indenting when there is a chunck of text selected.
vnoremap < <gv
vnoremap > >gv

" Use alt to change tabs.
" TODO(marcelocra): figure how to avoid this conflicting with vim-sexp.
" nnoremap <m-j> :tabprevious<cr>
" nnoremap <m-k> :tabnext<cr>
" inoremap <m-j> <esc>:tabprevious<cr>
" inoremap <m-k> <esc>:tabnext<cr>



" -- [ Leader mappings ] -------------------------------------------------------

" Change leader.
let mapleader = ","
let maplocalleader = " "

" Execute last macro recorded in register 'q'.
" nnoremap <space> @q

" Easily source my vimrc.
nnoremap <leader><leader>sv :source $MYVIMRC<cr>
" Easily edit my vimrc.
nnoremap <leader><leader>ev :tabe $MYVIMRC<cr>

" Clear last search.
nnoremap <silent> <c-n> :let @/ = ""<cr>

" Save while in insert mode without leaving insert mode.
nnoremap <leader>w :w<cr>
inoremap <leader>w <esc>:w<cr>

" Quit easily.
nnoremap <leader>q :q<cr>
inoremap <leader>q <esc>:q<cr>

" Save and quit easily.
inoremap <leader>x <esc>:x<cr>
nnoremap <leader>x :x<cr>

" Select all.
nnoremap <leader>a ggVG

" Change tabs.
nnoremap [t :tabprevious<cr>
nnoremap ]t :tabnext<cr>


" -- [ Plugins mappings ] ------------------------------------------------------

" For vscode-neovim. Settings that should be enabled only in cmdline vim
" should go here.
if !exists('g:vscode')
endif

" fzf settings.
nnoremap <c-p> :Files<cr>

let g:sneak#label = 1
let g:sneak#s_next = 1

" molokai settings.
"let g:molokai_original = 0
"let g:rehash256 = 0

