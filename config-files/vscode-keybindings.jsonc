// Place your key bindings in this file to override the defaultsauto[]
[
  //============================================================================
  //= workbench
  //============================================================================

  {
    "key": "ctrl+,",
    "command": "workbench.action.navigateBack"
  },
  {
    "key": "ctrl+alt+-",
    "command": "-workbench.action.navigateBack"
  },
  {
    "key": "ctrl+.",
    "command": "workbench.action.navigateForward"
  },
  {
    "key": "ctrl+shift+-",
    "command": "-workbench.action.navigateForward"
  },
  {
    "key": "ctrl+,",
    "command": "-workbench.action.openSettings"
  },
  {
    "key": "ctrl+shift+,",
    "command": "workbench.action.openSettings"
  },
  {
    "key": "ctrl+k ctrl+a",
    "command": "workbench.action.toggleActivityBarVisibility"
  },
  {
    "key": "ctrl+shift+x",
    "command": "-workbench.view.extensions"
  },
  {
    "key": "ctrl+k ctrl+x",
    "command": "workbench.view.extensions"
  },
  {
    "key": "ctrl+k ctrl+e",
    "command": "workbench.view.explorer"
  },
  {
    "key": "ctrl+shift+e",
    "command": "-workbench.view.explorer"
  },
  {
    "key": "alt+shift+m",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+k ctrl+m",
    "command": "-workbench.extensions.action.showRecommendedKeymapExtensions"
  },
  {
    "key": "ctrl+r",
    "command": "workbench.action.debug.restart",
    "when": "inDebugMode"
  },
  {
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpen"
  },
  {
    "key": "ctrl+t",
    "command": "-workbench.action.showAllSymbols"
  },
  {
    "key": "ctrl+t",
    "command": "workbench.action.togglePanel",
    "when": "activePanel && terminalFocus"
  },
  {
    "key": "ctrl+t",
    "command": "workbench.action.terminal.focus",
    "when": "activePanel && !terminalFocus"
  },
  {
    "key": "ctrl+t",
    "command": "workbench.action.togglePanel",
    "when": "!activePanel"
  },
  {
    "key": "ctrl+j",
    "command": "-workbench.action.togglePanel"
  },
  // {
  //   "key": "ctrl+c",
  //   "command": "workbench.action.terminal.copySelection",
  //   "when": "terminalFocus"
  // },
  // {
  //   "key": "ctrl+v",
  //   "command": "workbench.action.terminal.paste",
  //   "when": "terminalFocus"
  // },
  // {
  //   "key": "ctrl+shift+c",
  //   "command": "workbench.action.terminal.sendSequence",
  //   "args": {
  //     "text": "\u0003"
  //   },
  //   "when": "terminalFocus"
  // },

  //============================================================================
  //= editor
  //============================================================================

  {
    "key": "ctrl+shift+,",
    "command": "-editor.action.inPlaceReplace.up",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+.",
    "command": "-editor.action.quickFix",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k ctrl+x",
    "command": "-editor.action.trimTrailingWhitespace",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+d",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorTextFocus && vim.active && vim.mode == 'Insert' || vim.mode == 'Visual'"
  },
  {
    "key": "ctrl+x",
    "command": "editor.action.moveSelectionToNextFindMatch",
    "when": "editorTextFocus && vim.active && vim.mode == 'Insert' || vim.mode == 'Visual'"
  },

  //============================================================================
  //= calva
  //============================================================================

  // {
  //   "key": "ctrl+enter",
  //   "command": "calva.evaluateSelection",
  //   "when": "calva:connected && editorTextFocus && editorLangId == clojure"
  // },
  // {
  //   "key": "shift+alt+f",
  //   "command": "calva.sendCurrentFormToOutputWindow",
  //   "when": "calva:connected && calva:connected && !calva:outputWindowActive && editorLangId == 'clojure'"
  // },
  // {
  //   "key": "ctrl+alt+c ctrl+alt+v",
  //   "command": "-calva.sendCurrentFormToOutputWindow",
  //   "when": "calva:connected && calva:connected && !calva:outputWindowActive && editorLangId == 'clojure'"
  // },
  // {
  //   "key": "shift+alt+p",
  //   "command": "calva.sendCurrentTopLevelFormToOutputWindow",
  //   "when": "calva:connected && calva:connected && !calva:outputWindowActive && editorLangId == 'clojure'"
  // },
  // {
  //   "key": "ctrl+alt+c ctrl+alt+space",
  //   "command": "-calva.sendCurrentTopLevelFormToOutputWindow",
  //   "when": "calva:connected && calva:connected && !calva:outputWindowActive && editorLangId == 'clojure'"
  // },
  // {
  //   "key": "shift+alt+l",
  //   "command": "calva.loadFile",
  //   "when": "calva:connected"
  // },
  // {
  //   "key": "ctrl+alt+c enter",
  //   "command": "-calva.loadFile",
  //   "when": "calva:connected"
  // },

  //============================================================================
  //= paredit
  //============================================================================

  // {
  //   "key": "ctrl+backspace",
  //   "command": "-paredit.killListBackward",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "shift+alt+left",
  //   "command": "paredit.barfSexpForward",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "ctrl+left",
  //   "command": "-paredit.barfSexpForward",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "shift+alt+right",
  //   "command": "paredit.slurpSexpForward",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "ctrl+right",
  //   "command": "-paredit.slurpSexpForward",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "alt+s",
  //   "command": "paredit.spliceSexp",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "ctrl+alt+s",
  //   "command": "-paredit.spliceSexp",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "shift+alt+s",
  //   "command": "paredit.splitSexp",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "ctrl+shift+s",
  //   "command": "-paredit.splitSexp",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },

  //============================================================================
  //= camelCase movements between humps, aka cursorWordPart.
  //============================================================================

  {
    "key": "ctrl+alt+l",
    "command": "cursorWordPartRight",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+shift+l",
    "command": "cursorWordPartRightSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+h",
    "command": "cursorWordPartStartLeft",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+shift+h",
    "command": "cursorWordPartStartLeftSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+backspace",
    "command": "deleteWordPartLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+delete",
    "command": "deleteWordPartRight",
    "when": "textInputFocus && !editorReadonly"
  },

  //============================================================================
  //= misc
  //============================================================================

  {
    "key": "ctrl+k ctrl+e",
    "command": "-keybindings.editor.defineWhenExpression",
    "when": "inKeybindings && keybindingFocus"
  },
  {
    "key": "ctrl+.",
    "command": "-problems.action.showQuickFixes",
    "when": "problemFocus"
  },
  {
    "key": "ctrl+.",
    "command": "-settings.action.editFocusedSetting",
    "when": "inSettingsSearch"
  },
  {
    "key": "ctrl+k ctrl+v",
    "command": "toggleVim"
  },
  {
    "key": "ctrl+alt+j",
    "command": "cursorDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+k",
    "command": "cursorUp",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+k ctrl+g",
    "command": "issue.copyGithubPermalink"
  }
]
