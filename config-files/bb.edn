{:min-bb-version "1.3.188"

 :tasks
 {:requires ([babashka.fs :as fs]
             [babashka.cli :as cli])
  :init (do 
          (def cli-options
            {:cljs-ns {:default "core"}})
          (def parsed-cli-args (cli/parse-opts *command-line-args* {:spec cli-options}))

          (defn now
            "Creates a date and time string for the current moment."
            [& {:keys [format-str]}]
            (let [date (java.util.Date.)]
              (-> (java.text.SimpleDateFormat. (if (nil? format-str)
                                                 "yyyy-MM-dd HH:mm:ss.SSS"
                                                 format-str))
                  (.format date))))

          (defn logging
            "Logs timestamp with task name."
            [text-to-log]
            (let [log (Object.)] 
              (locking log
                (println 
                  (format 
                    "[%s | %s] %s"
                    (now)
                    (:name (current-task))
                    text-to-log))))))
  :enter (logging "starting")
  :leave (logging "done!")

  hello-world
  {:doc "Checks if the bb tasks are working."
   :task (shell "echo 'hello, world!'")}

  nrepl
  {:doc "Creates a babashka nrepl server and saves its port to a file, to be read by other tools."
   :requires ([babashka.fs :as fs]
              [babashka.nrepl.server :as srv])
   :task (do (srv/start-server! {:host "localhost"
                                 :port 1339})
             (spit ".nrepl-port" "1339")
             (-> (Runtime/getRuntime)
                 (.addShutdownHook
                   (Thread. (fn [] (fs/delete ".nrepl-port")))))
             (deref (promise)))}

  cljs
  {:doc "Runs a simple cljs repl, without shadow-cljs or anything else."
   :task (shell 
           (format 
             "clj -M:cljs
             --main cljs.main
             --repl-opts \"%s\"
             --compile %s
             --repl"
             (str {:launch-browser false})
             (:cljs-ns parsed-cli-args)))}

  cljs-adv
  {:doc "Creates a production build of a cljs project."
   :task (shell 
           (format 
             "clj -M:cljs
             --main cljs.main
             --optimizations advanced
             --compile %s"
             (:cljs-ns parsed-cli-args)))}

  cljs-serve
  {:doc "Checks if the generated production build still works, as a lot of advanced compilation and deletions happen."
   :task (shell "clj -M:cljs --main cljs.main --serve")}

  cljs-node-compile
  {:doc "Creates a javascript output for nodejs."
   :task (shell 
           (format 
             "clj -M:cljs
             --main cljs.main
             --target node
             --output-to main.js
             --compile %s"
             (:cljs-ns parsed-cli-args)))}

  cljs-node-repl
  {:doc "Runs a nodejs repl."
   :task (shell "clj -M:cljs:cider-nrepl
                --main cljs.main
                --output-to main.js
                --repl-env node")}


  ;; Write next task above this comment.
  }}
