{
  //============================================================================
  //= Programming fonts and their ideal settings
  //============================================================================
  // // Roboto Mono
  // // -----------
  // "editor.fontFamily": "Roboto Mono",
  // "editor.fontSize": 15,

  // // Inconsolata
  // // -----------
  // "editor.fontFamily": "Inconsolata",
  // "editor.fontSize": 16,

  // // JetBrains Mono
  // // --------------
  // "editor.fontFamily": "JetBrains Mono",
  // "editor.fontSize": 13,

  // // Fira Code Light
  // // ---------------
  // "editor.fontFamily": "Fira Code Light",
  // "editor.fontLigatures": false,
  // "editor.fontSize": 13,

  // // Fira Code
  // // ---------
  // "editor.fontFamily": "Fira Code",
  // "editor.fontSize": 15,

  // // Fantasque Sans Mono
  // // -------------------
  // "editor.fontFamily": "Fantasque Sans Mono",
  // "editor.fontSize": 15,

  // // IBM Plex Mono
  // // -------------
  // "editor.fontFamily": "IBM Plex Mono",
  // "editor.fontSize": 13,

  // // Anonymous Pro
  // // -------------
  // "editor.fontFamily": "Anonymous Pro",
  // "editor.fontSize": 15,

  // // Consolas
  // // --------
  // "editor.fontFamily": "Consolas",
  // "editor.fontSize": 14,

  // // Cascadia Code
  // // -------------
  // "editor.fontFamily": "Cascadia Code PL Light", // Good size: 15
  // // ss19: dashed zero; ss01: stylistic alternates for italics.
  // // not sure what 'calt' does, but it is reccomended in the docs:
  // // https://github.com/microsoft/cascadia-code#to-enable-the-cursive-form-of-the-italic-heres-the-code-you-should-use
  // // "editor.fontLigatures": "'ss19', 'calt', 'ss01'",
  // // "editor.fontLigatures": "'ss19'",
  // "editor.fontSize": 15,

  // CodeNewRoman
  // ------------
  // "editor.fontWeight": "bold",
  "editor.fontFamily": "'CodeNewRoman Nerd Font', 'CodeNewRoman Nerd Font Mono', monospace",
  "editor.fontSize": 15,

  // // Meslo
  // // -----
  // // "editor.fontWeight": "bold",
  // "editor.fontFamily": "'MesloLGS Nerd Font', 'MesloLGS NF', monospace",
  // "editor.fontSize": 15,

  //============================================================================
  //= Editor settings
  //============================================================================
  // "editor.wordWrap": "wordWrapColumn",
  // "editor.wordWrapColumn": 120,
  // "editor.lineHeight": 16,
  // "editor.letterSpacing": -0.8,
  // "editor.fontWeight": "900",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "editor.quickSuggestions": {
    "other": false,
    "comments": false,
    "strings": true
  },
  "editor.parameterHints.enabled": false,
  "editor.suggest.snippetsPreventQuickSuggestions": false,
  "editor.foldingStrategy": "indentation",
  "editor.guides.bracketPairs": "active",
  "editor.bracketPairColorization.enabled": true,
  "editor.guides.indentation": true,
  "editor.guides.highlightActiveIndentation": true,
  "editor.semanticHighlighting.enabled": true,
  "editor.tabSize": 2,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.cursorStyle": "line-thin",
  "editor.cursorBlinking": "phase",
  "editor.rulers": [80],
  "editor.minimap.maxColumn": 80,
  "editor.minimap.renderCharacters": false,
  "editor.minimap.showSlider": "always",
  "editor.minimap.size": "fill",
  "editor.formatOnSave": true,
  "editor.tabCompletion": "onlySnippets",
  "editor.renderWhitespace": "none",
  "editor.acceptSuggestionOnCommitCharacter": false,

  //============================================================================
  // JavaScript
  //============================================================================
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  "javascript.updateImportsOnFileMove.enabled": "never",
  "[javascript]": {
    "editor.rulers": [80, 100]
  },
  "[javascriptreact]": {
    "editor.rulers": [80, 100]
  },

  //============================================================================
  //= TypeScript
  //============================================================================
  "[typescript]": {
    "editor.rulers": [80, 100]
  },
  "[typescriptreact]": {
    "editor.rulers": [80, 100]
  },

  //============================================================================
  //= Svelte
  //============================================================================
  "[svelte]": {
    "editor.defaultFormatter": "svelte.svelte-vscode"
  },
  "svelte.enable-ts-plugin": true,

  //============================================================================
  //= Go
  //============================================================================
  "go.formatTool": "goimports",

  //============================================================================
  //= Dart
  //============================================================================
  "dart.openDevTools": "flutter",
  "dart.debugExternalPackageLibraries": false,
  "dart.debugSdkLibraries": false,
  "[dart]": {
    "editor.formatOnSave": true,
    "editor.formatOnType": true,
    "editor.rulers": [80],
    "editor.selectionHighlight": false,
    "editor.suggest.snippetsPreventQuickSuggestions": false,
    "editor.suggestSelection": "first",
    "editor.tabCompletion": "onlySnippets",
    "editor.wordBasedSuggestions": false,
    "editor.defaultFormatter": "Dart-Code.dart-code"
  },

  //============================================================================
  //= Gitlens
  //============================================================================
  "gitlens.defaultDateLocale": "pt-BR",
  "gitlens.defaultDateStyle": "absolute",
  "gitlens.defaultDateFormat": "DDMMMYY HH:mm",
  "gitlens.defaultDateShortFormat": "DDMMMYY",
  "gitlens.views.searchAndCompare.pullRequests.showForCommits": false,
  "gitlens.views.searchAndCompare.pullRequests.enabled": false,
  "gitlens.views.contributors.pullRequests.showForCommits": false,
  "gitlens.views.contributors.pullRequests.enabled": false,
  "gitlens.views.worktrees.pullRequests.showForCommits": false,
  "gitlens.views.worktrees.pullRequests.showForBranches": false,
  "gitlens.views.worktrees.pullRequests.enabled": false,
  "gitlens.views.remotes.pullRequests.showForCommits": false,
  "gitlens.views.remotes.pullRequests.showForBranches": false,
  "gitlens.views.remotes.pullRequests.enabled": false,
  "gitlens.views.branches.pullRequests.showForCommits": false,
  "gitlens.views.branches.pullRequests.showForBranches": false,
  "gitlens.views.branches.pullRequests.enabled": false,
  "gitlens.views.repositories.pullRequests.showForCommits": false,
  "gitlens.views.repositories.pullRequests.showForBranches": false,
  "gitlens.views.repositories.pullRequests.enabled": false,
  "gitlens.views.commits.pullRequests.showForBranches": false,
  "gitlens.views.commits.pullRequests.enabled": false,
  "gitlens.hovers.autolinks.enhanced": false,
  "gitlens.hovers.pullRequests.enabled": false,
  "gitlens.statusBar.pullRequests.enabled": false,
  "gitlens.currentLine.pullRequests.enabled": false,
  "gitlens.views.commits.pullRequests.showForCommits": false,

  //============================================================================
  //= HTML and markups
  //============================================================================
  "html.suggest.html5": false,
  "[markdown]": {
    "editor.wordWrap": "wordWrapColumn",
    "editor.wordWrapColumn": 80,
    "editor.wrappingIndent": "same"
  },
  "[asciidoc]": {
    "editor.wordWrap": "wordWrapColumn",
    "editor.wordWrapColumn": 80,
    "editor.wrappingIndent": "same"
  },

  //============================================================================
  //= Vim extension
  //============================================================================
  "vim.easymotion": true,
  "vim.sneak": true,
  "vim.surround": true,
  "vim.incsearch": true,
  "vim.useSystemClipboard": true,
  "vim.useCtrlKeys": true,
  "vim.hlsearch": true,
  "vim.smartRelativeLine": true,
  "vim.insertModeKeyBindingsNonRecursive": [
    {
      "before": ["j", "f"],
      "after": ["<esc>"]
    },
    {
      "before": ["f", "j"],
      "after": ["<esc>"]
    },
    {
      "before": ["<leader>", "w"],
      "commands": [":w"],
      "after": ["<esc>"]
    },
    {
      "before": ["<leader>", "x"],
      "commands": [":x"]
      // "after": ["<esc>"]
    },
    {
      "before": ["<c-n>"],
      "commands": [":nohl"]
    }
  ],
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": ["<leader>", "j"],
      "after": ["o", "<esc>", "k"]
    },
    {
      "before": ["<leader>", "k"],
      "after": ["O", "<esc>", "j"]
    },
    // Use vim-unimpaired shortcuts.
    {
      "before": ["[", "t"], // For some reason, <c-h> doesn't work...
      "commands": [":tabp"]
    },
    {
      "before": ["]", "t"], // ... and <c-l> also.
      "commands": [":tabn"]
    },
    {
      "before": ["<c-l>"],
      "after": ["<c-w>", "<c-w>"]
    },
    {
      "before": ["<c-h>"],
      "after": ["<c-w>", "<c-w>"]
    },
    {
      "before": ["<leader>", "d"],
      "after": ["d", "d"]
    },
    {
      "before": ["<c-n>"],
      "commands": [":nohl"]
    },
    {
      "before": ["<leader>", "w"],
      "commands": [":w"]
    },
    {
      "before": ["<leader>", "x"],
      "commands": [":x"]
    },
    {
      "before": ["<leader>", "q"],
      "commands": [":q"]
    },
    {
      "before": ["<space>"],
      "after": ["@", "q"]
    },
    {
      "before": ["u"],
      "commands": ["undo"]
    },
    {
      "before": ["<c-r>"],
      "commands": ["redo"]
    },
    {
      "before": ["<leader>", "a"],
      "after": ["g", "g", "V", "G"]
    },
    // Move using visual lines.
    {
      "before": ["j"],
      "after": ["g", "j"]
    },
    {
      "before": ["k"],
      "after": ["g", "k"]
    },
    {
      "before": ["s"],
      "after": ["leader", "leader", "s"]
    },
    {
      "before": ["<c-a>"],
      "after": ["gg", "V", "G"]
    },
    {
      "before": ["<c-x>"],
      "after": ["V", "d"]
    },
    {
      "before": ["<c-c>"],
      "after": ["V", "y"]
    },
    {
      "before": ["<c-v>"],
      "after": ["p"]
    }
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      "before": ["<leader>", "w"],
      "commands": [":w"],
      "after": ["<esc>"]
    },
    {
      "before": ["<leader>", "x"],
      "commands": [":x"],
      "after": ["<esc>"]
    },
    {
      "before": ["<leader>", "q"],
      "commands": [":q"],
      "after": ["<esc>"]
    },
    {
      "before": ["<c-n>"],
      "commands": [":nohl"]
    },
    // Prevents `p` from yanking text that is being overwriten. When that
    // behavior is desired, use `gp`.
    {
      "before": ["g", "p"],
      "after": ["p"]
    },
    {
      "before": ["p"],
      "after": ["\"", "_", "d", "P"]
    }
  ],
  "vim.leader": ",",

  //============================================================================
  //= Calva
  //============================================================================
  "calva.paredit.defaultKeyMap": "strict",
  "calva.replConnectSequences": [],
  "calva.showCalvaSaysOnStart": false,
  "calva.prettyPrintingOptions": {
    "printEngine": "pprint",
    "enabled": true,
    "width": 120,
    "maxLength": 50
  },
  "[clojure]": {
    "editor.wordSeparators": "\t ()\"':,;~@#$%^&{}[]`",
    "editor.autoClosingBrackets": "always",
    "editor.autoClosingQuotes": "always",
    "editor.formatOnType": true,
    "editor.autoIndent": "full",
    "editor.formatOnPaste": true,
    "files.trimTrailingWhitespace": false,
    "editor.parameterHints.enabled": false,
    "editor.unicodeHighlight.allowedCharacters": {
      " ": true,
      "꞉": true
    },
    "editor.defaultFormatter": "betterthantomorrow.calva"
  },

  //============================================================================
  //= Deno
  //============================================================================
  "deno.enable": false,

  //============================================================================
  //= F#
  //============================================================================
  "[fsharp]": {
    "editor.defaultFormatter": "Ionide.Ionide-fsharp",
    "editor.tabSize": 4
  },

  //============================================================================
  //= Tailwind CSS
  //============================================================================
  "tailwindCSS.emmetCompletions": true,

  //============================================================================
  //= Misc settings
  //============================================================================
  "diffEditor.ignoreTrimWhitespace": false,
  "explorer.openEditors.visible": 0,
  "files.associations": {
    "*.erb": "erb",
    "*.css": "css",
    "vimrc": "vimrc"
  },
  "git.ignoreMissingGitWarning": true,
  "nxConsole.enableTelemetry": false,
  "problems.showCurrentInStatus": true,
  "remoteHub.commitDirectlyWarning": "off",
  "scm.diffDecorationsGutterWidth": 2,
  "search.exclude": {
    "**/.clj-kondo": true,
    "**/.lsp": true,
    "**/*.code-search": true,
    "**/bower_components": true,
    "**/node_modules": true,
    "**/out": true
  },
  "telemetry.telemetryLevel": "off",
  "terminal.integrated.allowChords": false,
  "terminal.integrated.commandsToSkipShell": [
    "-workbench.action.terminal.focusFind"
  ],
  "terminal.integrated.tabs.enabled": true,
  "typescript.tsserver.experimental.enableProjectDiagnostics": true,
  "window.title": "${dirty}${activeEditorLong}${separator}${appName}",
  "workbench.colorCustomizations": {
    "tree.indentGuidesStroke": "#00ffff",
    "editorIndentGuide.activeBackground": "#00ffff"
  },
  "workbench.colorTheme": "Night Owl Light",
  "workbench.startupEditor": "newUntitledFile",
  "workbench.tree.indent": 20,
  "workbench.tree.renderIndentGuides": "always",
  "terminal.integrated.fontFamily": "'MesloLGS Nerd Font', 'MesloLGS NF', monospace",
  "terminal.integrated.fontSize": 13,
  "terminal.integrated.macOptionClickForcesSelection": true,
  "files.eol": "\n",
  "explorer.excludeGitIgnore": false,
  "git.confirmSync": false,
  "typescript.updateImportsOnFileMove.enabled": "always",
  "explorer.confirmDragAndDrop": false,
  "diffEditor.renderSideBySide": true,
  "dart.flutterSdkPath": "${env:FLUTTER_SDK}",
  "rubyLsp.rubyVersionManager": "asdf",
  "emmet.includeLanguages": {
    "erb": "html"
  },
  "workbench.list.horizontalScrolling": true,
  "git.openRepositoryInParentFolders": "never",
  "editor.inlineSuggest.enabled": true,
  "github.copilot.enable": {
    "*": true
  },
  "window.newWindowDimensions": "inherit",
  "outline.collapseItems": "alwaysCollapse"
}
