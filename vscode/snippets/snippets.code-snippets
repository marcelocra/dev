// Place your global snippets here. Each snippet is defined under a snippet name
// and has a scope, prefix, body and description. Add comma separated ids of the
// languages where the snippet is applicable in the scope field. If scope is left
// empty or omitted, the snippet gets applied to all languages. The prefix is
// what is used to trigger the snippet and the body will be expanded and
// inserted. Possible variables are: $1, $2 for tab stops, $0 for the final
// cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders
// with the same ids are connected.
//
// Example:
//  "Print to console": {
// 	  "scope": "javascript,typescript",
// 	  "prefix": "log",
//  	"body": [
//  		"console.log('$1');",
// 	  	"$2"
// 	  ],
// 	  "description": "Log output to console"
//  }
{
  // -- ESLINT -----
  "eslint disable next line without reason": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ednl",
    "body": [
      "// eslint-disable-next-line"
    ]
  },
  "eslint disable next line with reason": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "ednlr",
    "body": [
      "// eslint-disable-next-line ${1:@typescript-eslint/no-explicit-any}$0"
    ]
  },
  "eslint disable next line useEffect exhaustive deps": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ednlex",
    "body": [
      "// eslint-disable-next-line react-hooks/exhaustive-deps"
    ]
  },
  // -- REACT -----
  "react useState hook": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "us",
    "body": [
      "const [$1, set${1/(.*)/${1:/capitalize}/}] = useState($2)"
    ]
  },
  "react useEffect hook": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ue",
    "body": [
      "useEffect(() => {",
      "  $1",
      "}, [$2])"
    ]
  },
  "react const with function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "const",
    "body": [
      "const $2 = $1()"
    ]
  },
  "delay promise": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "delay",
    "body": [
      "await new Promise((resolve) => setTimeout(resolve, $1))"
    ]
  },
  // -- PRETTIER -----
  "prettier essentials": {
    "scope": "json",
    "description": "All projects should use these.",
    "prefix": "prettier-essentials",
    "body": [
      "\"endOfLine\": \"lf\",",
      "\"printWidth\": 80,",
      "\"proseWrap\": \"preserve\",",
      "\"tabWidth\": 2,",
      "\"useTabs\": false,",
      "\"rulers\": [80]"
    ]
  },
  "prettier global overrides": {
    "scope": "json",
    "prefix": "prettier-global-overrides",
    "body": [
      "\"overrides\": [",
      "  {",
      "    \"files\": \"*.md\",",
      "    \"options\": {",
      "      \"parser\": \"markdown\",",
      "      \"printWidth\": 80,",
      "      \"proseWrap\": \"always\"",
      "    }",
      "  },",
      "  {",
      "    \"files\": [\".prettierrc\"],",
      "    \"options\": {",
      "      \"parser\": \"json\"",
      "    }",
      "  }",
      "]"
    ]
  },
  "prettier javascript defaults": {
    "scope": "json",
    "prefix": "prettier-javascript-defaults",
    "body": [
      "\"arrowParens\": \"always\",",
      "\"bracketSpacing\": true,",
      "\"insertPragma\": false,",
      "\"singleAttributePerLine\": false,",
      "\"bracketSameLine\": false,",
      "\"quoteProps\": \"as-needed\",",
      "\"requirePragma\": false,",
      "\"semi\": true,",
      "\"singleQuote\": true,",
      "\"trailingComma\": \"es5\",",
      "\"htmlWhitespaceSensitivity\": \"css\",",
      "\"jsxBracketSameLine\": false,",
      "\"jsxSingleQuote\": false,",
      "\"vueIndentScriptAndStyle\": false,"
    ]
  },
  // -- DOCKERFILE -----
  "dockerfile essentials": {
    "scope": "dockerfile",
    "prefix": "init",
    "body": [
      "# syntax=docker/dockerfile:1",
      "FROM ubuntu:22.04",
      "",
      "ENV HOME=\"/root\"",
      "",
      "ARG shell_rc=\"\\${HOME}/.bashrc\"",
      "",
      "# Create a reasonably decent prompt line.",
      "RUN echo 'PS1=\"\\\\$(printf \\\"=%.0s\\\" \\\\$(seq 1 \\\\\\${COLUMNS}))\\n[\\\\$(TZ=\\\"America/Sao_Paulo\\\" date \\\"+%F %T\\\")] [\\w]\\n# \"' >> \\${shell_rc}",
      "",
      "# Update and install essentials.",
      "RUN apt-get update",
      "RUN apt-get install -y wget git tmux ripgrep curl unzip neovim less xz-utils fontconfig",
      "",
      "# Install git-lfs.",
      "RUN wget https://github.com/git-lfs/git-lfs/releases/download/v3.3.0/git-lfs-linux-amd64-v3.3.0.tar.gz",
      "RUN tar zxf git-lfs-linux-amd64-v3.3.0.tar.gz",
      "RUN mv git-lfs-3.3.0/git-lfs /usr/bin",
      "RUN rm -f ./git-lfs-linux-amd64-v3.3.0.tar.gz",
      "RUN rm -rf ./git-lfs-3.3.0/",
      "",
      "# Download my helpers.",
      "RUN wget https://raw.githubusercontent.com/marcelocra/dev/main/config-files/.tmux.conf -P ~",
      "RUN wget https://raw.githubusercontent.com/marcelocra/dev/main/config-files/.gitconfig -P ~",
      "RUN wget https://raw.githubusercontent.com/marcelocra/dev/main/config-files/.gitconfig.personal.gitconfig -P ~",
      "RUN wget https://raw.githubusercontent.com/marcelocra/dev/main/config-files/init_shell.sh -P ~",
      "RUN echo 'source ~/init_shell.sh' >> \\${shell_rc}",
      ""
    ]
  },
  "dockerfile rust": {
    "scope": "dockerfile",
    "prefix": "rust",
    "body": [
      "# Install Rust. '-y' is for non-interactive mode.",
      "RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y",
      ""
    ]
  },
  "javascript type": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "type",
    "body": [
      "/** @type {$1} */ $2"
    ]
  },
  "tsignore": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "tsi",
    "body": [
      "//@ts-ignore"
    ]
  },
  "md fold region": {
    "scope": "markdown",
    "prefix": [
      "fold",
      "region"
    ],
    "body": [
      "<!-- #region $1 -->",
      "$2",
      "<!-- #endregion -->"
    ]
  },
  "shebang": {
    "prefix": "shebang",
    "body": [
      "#!/usr/bin/env $1"
    ]
  },
  "md checkbox": {
    "scope": "markdown",
    "prefix": [
      "--"
    ],
    "body": [
      "- [ ] "
    ]
  },
  "md numbered checkbox": {
    "scope": "markdown",
    "prefix": [
      "k"
    ],
    "body": [
      "1. [ ] "
    ]
  },
  "config comment block": {
    "scope": "json,jsonc",
    "description": "Create simple comment to make parts of a config easier to find. The parenthesis also simplify jumping between start and finish of the block.",
    "prefix": "-",
    "body": [
      "// -$1(",
      "$0",
      "// )$1-"
    ]
  },
  "ts ignore": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ig",
    "body": [
      "// @ts-ignore"
    ]
  },
  "ts expect error": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "tse",
    "body": [
      "//@ts-expect-error - ${1:expected error} ${0:reason}"
    ]
  },
  "snippet to create snippets": {
    "scope": "snippets",
    "prefix": "snip",
    "body": [
      "\"${1:text that appears when showing the snippet before completion}\": {",
      "  \"scope\": \"${2:snippets}\",",
      "  \"prefix\": \"${3:trig}\",",
      "  \"body\": [",
      "    \"$4\"",
      "  ]",
      "},",
    ]
  },
  "linguist detectable": {
    "scope": "properties",
    "prefix": "lde",
    "body": [
      "${1:linguist-detectable}"
    ]
  },
  "linguist documentation": {
    "scope": "properties",
    "prefix": "ldo",
    "body": [
      "${1:linguist-documentation}"
    ]
  },
  "linguist generated": {
    "scope": "properties",
    "prefix": "lge",
    "body": [
      "${1:linguist-generated}"
    ]
  },
  "linguist language": {
    "scope": "properties",
    "prefix": "lla",
    "body": [
      "${1:linguist-language=${0:name}}"
    ]
  },
  "linguist vendored": {
    "scope": "properties",
    "prefix": "lve",
    "body": [
      "${0:linguist-vendored}"
    ]
  },
  "simplify commenting forms in clojure": {
    "scope": "clojure,clojurescript,cljs,clj",
    "prefix": "c",
    "body": [
      "#_"
    ]
  },
  "rich comment": {
    "scope": "clojure,clojurescript",
    "prefix": "rich",
    "body": [
      ";; playground!",
      "(comment",
      "",
      "  $0",
      "",
      "  #_(\"do not wrap me!\"))",
    ]
  },
  "add tailwindcss play cdn conditionally to re-frame app": {
    "scope": "clojure,clojurescript",
    "prefix": "re-tw",
    "body": [
      ";; Lets use TailwindCSS CDN during development, for simplicity.",
      "(when config/debug?",
      "  (let [body (.-body js/document)",
      "        script (.createElement js/document \"script\")]",
      "    (.setAttribute script \"src\" \"https://cdn.tailwindcss.com\")",
      "    (.setAttribute body \"class\" \"container min-w-[700] min-h-screen mx-auto\")",
      "    (.appendChild body script)))",
    ]
  },
  "clojure and clojurescript snippets scope": {
    "scope": "snippets",
    "prefix": "clj+",
    "body": [
      "clojure,clojurescript,clj,cljs"
    ]
  },
  "snippet to add json and jsonc": {
    "scope": "snippets",
    "prefix": "json",
    "body": [
      "json,jsonc"
    ]
  },
  "shadow watch with cider": {
    "scope": "clojure,clojurescript,clj,cljs,json,jsonc",
    "prefix": "shadow+cider",
    "body": [
      "shadow-cljs -d cider/cider-nrepl:0.28.5 watch"
    ]
  },
  "add keybinding for a particular vim mode": {
    "scope": "json,jsonc",
    "prefix": "vimmode",
    "body": [
      "vim.active && vim.mode == '$1'${2: && }$0"
    ]
  },
  "simplify adding a new keybinding": {
    "scope": "json,jsonc",
    "prefix": "key",
    "body": [
      "{",
      "  \"key\": \"$1\",",
      "  \"command\": \"$2\",",
      "  \"when\": \"$3\"",
      "},$0",
    ]
  },
  "classname for jsx and tsx": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "c",
    "body": [
      "className=\"$1\"${0: }"
    ]
  },
  "tailwind center stuff on page": {
    "scope": "html,javascriptreact, typescriptreact",
    "prefix": "center",
    "body": [
      "min-h-screen mx-auto flex justify-center items-center"
    ]
  },
  "eslint allow no explicit any": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "eslint-nea",
    "body": [
      "// eslint-disable-next-line @typescript-eslint/no-explicit-any"
    ]
  },
  "(java|type)script(react|)": {
    "scope": "snippets",
    "prefix": "js",
    "body": [
      "javascript,javascriptreact,typescript,typescriptreact"
    ]
  },
  "search comments that also fold in vim": {
    "prefix": "co",
    "body": [
      "${1:#} $2(((",
      "$0",
      "${1:#} )))$2"
    ]
  },
  "improve how bash scripts deal with errors by adding these to the top of the file": {
    "scope": "shellscript",
    "prefix": "euxo",
    "body": [
      "${2:# -e: exit on error}",
      "${4:# -u: exit on undefined variable}",
      "${6:# -x: print commands before execution}",
      "${8:# -o pipefail: exits on command pipe failures}",
      "set -${1:e}${3:u}${5:x}${7:o pipefail}$0"
    ]
  },
  "json with comments - linguist": {
    "scope": "json,jsonc",
    "prefix": "linguistjson",
    "body": [
      "linguist-language=JSON-with-Comments"
    ]
  },
  "typescript name": {
    "prefix": "ts",
    "body": [
      "TypeScript"
    ]
  },
  "javascript name": {
    "prefix": "js",
    "body": [
      "JavaScript"
    ]
  },
}