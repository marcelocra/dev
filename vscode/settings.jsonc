{
  // -editor (

  "editor.fontFamily": "Cascadia Code NF",
  "editor.fontSize": 15, // edn{:desktop 15 :notebook 19}
  "editor.lineNumbers": "on",
  "editor.fontWeight": "300", // edn{:desktop "300" :notebook "300"}
  "editor.fontLigatures": "'calt', 'ss01', 'ss02', 'ss03', 'ss19', 'ss20'",
  // Ligature tests:
  //  ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~
  //  ~ < > = + _ _ ( ) * & ^ % $ # @ ! { } [ ] \ | / ? : ; , . ` ' " ´ ` ˜
  //  => -> <> <= >= != !== === |> <- --> ||

  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
    "source.fixAll": "explicit"
  },
  "editor.parameterHints.enabled": false,
  "editor.guides.bracketPairs": "active",
  "editor.bracketPairColorization.enabled": true,
  "editor.guides.indentation": true,
  "editor.guides.highlightActiveIndentation": true,
  "editor.semanticHighlighting.enabled": true,
  "editor.tabSize": 2,
  "editor.insertSpaces": true,
  "editor.detectIndentation": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.cursorStyle": "line-thin",
  "editor.cursorBlinking": "smooth",
  "editor.rulers": [80, 100, 120],
  "editor.minimap.maxColumn": 60,
  "editor.minimap.renderCharacters": false,
  "editor.minimap.showSlider": "always",
  "editor.minimap.size": "fill",
  "editor.formatOnSave": true,
  "editor.tabCompletion": "onlySnippets",
  "editor.suggest.snippetsPreventQuickSuggestions": false,
  "editor.quickSuggestions": {
    "other": false,
    "comments": false,
    "strings": "on"
  },
  "editor.renderWhitespace": "none",
  "editor.acceptSuggestionOnCommitCharacter": false,
  "editor.hover.delay": 1000,
  "editor.inlineSuggest.enabled": true,
  "editor.wordWrap": "on",
  "editor.lineHeight": 1.6,
  // "editor.letterSpacing": -0.8,
  "editor.roundedSelection": false,
  "editor.autoIndent": "full",
  "FSharp.smartIndent": true,

  // ) editor-

  // -explorer (
  "explorer.openEditors.visible": 1,
  "explorer.confirmDragAndDrop": false,
  "explorer.excludeGitIgnore": false,
  // ) explorer-

  // -files (
  "files.associations": {
    "*.erb": "erb",
    "*.css": "css",
    "vimrc": "vimrc",
    "json5": "jsonc",
    "*.liquid": "html",
    "*.mdx": "markdown"
  },
  "files.eol": "\n",
  // ) files-

  // -git (
  "git.ignoreMissingGitWarning": true,
  "git.confirmSync": false,
  "git.openRepositoryInParentFolders": "never",
  // ) git-

  // -terminal (
  "terminal.integrated.tabs.enabled": true,
  "terminal.integrated.fontFamily": "'MesloLGS Nerd Font', 'MesloLGS NF', monospace",
  "terminal.integrated.fontSize": 13, // edn{:desktop 13 :notebook 19}
  "terminal.integrated.fontWeight": "normal",
  "terminal.integrated.macOptionClickForcesSelection": true,
  "terminal.integrated.allowChords": false,
  "terminal.integrated.sendKeybindingsToShell": true,
  "terminal.integrated.drawBoldTextInBrightColors": true,
  "terminal.integrated.minimumContrastRatio": 1,
  "terminal.integrated.enableVisualBell": true,
  "terminal.integrated.bellDuration": 3000,
  // ) terminal-

  // -window (
  "window.title": "${dirty}${activeEditorLong}${separator}${appName}",
  "window.newWindowDimensions": "inherit",
  "window.restoreWindows": "none",
  "window.menuBarVisibility": "toggle",

  // -workbench (
  "workbench.colorCustomizations": {
    "editorCursor.foreground": "#fff", // edn{:dark "#fff" :light "#ff00ea" :dark-opt "#51ff00"}
    "tree.indentGuidesStroke": "#0084ff",
    "tree.inactiveIndentGuidesStroke": "#444", // edn{:dark "#444" :light "#d8d8d8"}
    "editorIndentGuide.activeBackground1": "#ff00c8", // edn{:dark "#ff00c8" :light "#00ffff"}
    "editorIndentGuide.background1": "#333", // edn{:dark "#333" :light "#eee"}
    "editor.lineHighlightBorder": "#ff00c833", // edn{:dark "#ff00c833" :light "#00ffff22"}
    "editor.lineHighlightBackground": "#ff00c822", // edn{:dark "#ff00c822" :light "#00ffff22"}
    "editor.selectionBackground": "#ff00c855", // edn{:dark "#ff00c855" :light "#00ffff77"}
    // TODO: figure out how to get this working.
    // "editor.selectionForeground": "#f00" // edn{:dark "#ff00c8" :light "#fff"}
    "calva.inlineErrorForegroundColor": "#ff0000",
    "calva.inlineForegroundColor": "#ff9000"
  },
  "workbench.startupEditor": "newUntitledFile",
  "workbench.tree.indent": 20,
  "workbench.tree.renderIndentGuides": "always",
  "workbench.list.horizontalScrolling": true,
  "workbench.sideBar.location": "left",
  "workbench.colorTheme": "GitHub Dark Dimmed",
  // ) workbench-

  // -eslint (
  "eslint.enable": true,
  "eslint.format.enable": true,
  "eslint.probe": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "html",
    "vue",
    "markdown",
    "svelte"
  ],
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  // ) eslint-

  // -tailwind (
  "tailwindCSS.emmetCompletions": true,
  "tailwindCSS.colorDecorators": false,
  "tailwindCSS.experimental.classRegex": [
    ":class\\s+\"([^\"]*)\"",
    // ":([^\"]*)[cC]lass\"([^\"]*)\"",
    ":[\\w-.#>]+\\.([\\w-]*)"
    // ["cva\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"],
    // ["cx\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"]
  ],
  "tailwindCSS.includeLanguages": {
    "clojure": "html",
    "cljs": "html"
  },

  // ) tailwind-

  // -dart(
  "dart.openDevTools": "flutter",
  "dart.debugExternalPackageLibraries": false,
  "dart.debugSdkLibraries": false,
  "[dart]": {
    "editor.formatOnSave": true,
    "editor.formatOnType": true,
    "editor.selectionHighlight": false,
    "editor.suggest.snippetsPreventQuickSuggestions": false,
    "editor.suggestSelection": "first",
    "editor.tabCompletion": "onlySnippets",
    "editor.wordBasedSuggestions": "off",
    "editor.defaultFormatter": "Dart-Code.dart-code"
  },
  "dart.flutterSdkPath": "${env:FLUTTER_SDK}",
  // ) dart-

  // -gitlens (
  "gitlens.defaultDateLocale": "pt-BR",
  "gitlens.defaultDateStyle": "absolute",
  "gitlens.defaultDateFormat": "DDMMMYY HH:mm",
  "gitlens.defaultDateShortFormat": "DDMMMYY",
  "gitlens.views.searchAndCompare.pullRequests.showForCommits": false,
  "gitlens.views.searchAndCompare.pullRequests.enabled": false,
  "gitlens.views.contributors.pullRequests.showForCommits": false,
  "gitlens.views.contributors.pullRequests.enabled": false,
  "gitlens.views.worktrees.pullRequests.showForCommits": false,
  "gitlens.views.worktrees.pullRequests.showForBranches": false,
  "gitlens.views.worktrees.pullRequests.enabled": false,
  "gitlens.views.remotes.pullRequests.showForCommits": false,
  "gitlens.views.remotes.pullRequests.showForBranches": false,
  "gitlens.views.remotes.pullRequests.enabled": false,
  "gitlens.views.branches.pullRequests.showForCommits": false,
  "gitlens.views.branches.pullRequests.showForBranches": false,
  "gitlens.views.branches.pullRequests.enabled": false,
  "gitlens.views.repositories.pullRequests.showForCommits": false,
  "gitlens.views.repositories.pullRequests.showForBranches": false,
  "gitlens.views.repositories.pullRequests.enabled": false,
  "gitlens.views.commits.pullRequests.showForBranches": false,
  "gitlens.views.commits.pullRequests.enabled": false,
  "gitlens.hovers.autolinks.enhanced": false,
  "gitlens.hovers.pullRequests.enabled": false,
  "gitlens.hovers.enabled": false,
  "gitlens.statusBar.pullRequests.enabled": false,
  "gitlens.currentLine.pullRequests.enabled": false,
  "gitlens.currentLine.enabled": false,
  "gitlens.views.commits.pullRequests.showForCommits": false,
  "gitlens.codeLens.authors.enabled": false,
  "gitlens.codeLens.recentChange.enabled": false,
  // ) gitlens-

  // -calva (
  "calva.paredit.defaultKeyMap": "original",
  "calva.replConnectSequences": [],
  "calva.showCalvaSaysOnStart": false,
  "calva.prettyPrintingOptions": {
    "printEngine": "pprint",
    "enabled": true,
    "width": 40
  },
  // ) calva-

  // -vim (
  "vim.easymotion": true,
  "vim.sneak": true,
  "vim.surround": true,
  "vim.incsearch": true,
  "vim.useSystemClipboard": true,
  "vim.useCtrlKeys": true,
  "vim.hlsearch": true,
  "vim.smartRelativeLine": false,
  "vim.foldfix": true,
  "vim.camelCaseMotion.enable": true,
  "vim.textwidth": 100,

  // This is VERY, PAINFULLY, UNUSABLY slow in Ubuntu 20.04. It uses gdbus, as shown in the
  // following link. I also got the scripts (get-im and set-im) from there:
  //
  //    https://github.com/daipeihust/im-select?tab=readme-ov-file#gdbus
  //
  // "vim.autoSwitchInputMethod.enable": true,
  // "vim.autoSwitchInputMethod.defaultIM": "1",
  // "vim.autoSwitchInputMethod.obtainIMCmd": "/home/marcelocra/bin/get-im",
  // "vim.autoSwitchInputMethod.switchIMCmd": "/home/marcelocra/bin/set-im {im}",

  // -viminsert(
  "vim.insertModeKeyBindingsNonRecursive": [
    {
      "before": ["j", "f"],
      "after": ["<esc>"]
    },
    {
      "before": ["f", "j"],
      "after": ["<esc>"]
    },
    {
      // something to try...
      // TODO: review later
      "before": ["<c-m>"],
      "after": ["<esc>"]
    },
    {
      // save and leave insert mode
      "before": ["<leader>", "s"],
      "commands": [":w"],
      "after": ["<esc>"]
    },
    {
      // save but stay in insert mode
      "before": ["<leader>", "<leader>", "s"],
      "commands": [":w"],
      "after": ["<esc>", "a"]
    },
    {
      // try to quit without saving
      "before": ["<leader>", "q"],
      "commands": [":q"]
    },
    {
      // save and quit
      "before": ["<leader>", "x"],
      "commands": [":x"]
    }
    // )viminsert-
  ],

  // -vimnormal(
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": ["<leader>", "j"],
      "after": ["o", "<esc>", "k"]
    },
    {
      "before": ["<leader>", "k"],
      "after": ["O", "<esc>", "j"]
    },
    // Use vim-unimpaired shortcuts.
    {
      "before": ["[", "t"],
      "commands": [":tabp"]
    },
    {
      "before": ["]", "t"],
      "commands": [":tabn"]
    },
    {
      "before": ["<c-l>"],
      "after": ["<c-w>", "l"]
    },
    {
      "before": ["<c-h>"],
      "after": ["<c-w>", "h"]
    },
    {
      "before": ["<c-j>"],
      "after": ["<c-w>", "j"]
    },
    {
      "before": ["<c-k>"],
      "after": ["<c-w>", "k"]
    },
    {
      "before": ["<leader>", "d"],
      "after": ["d", "d"]
    },
    {
      "before": ["<c-n>"],
      "commands": [":nohl"]
    },
    {
      "before": ["<leader>", "s"],
      "commands": [":w"]
    },
    {
      "before": ["<leader>", "x"],
      "commands": [":x"]
    },
    {
      "before": ["<leader>", "q"],
      "commands": [":q"]
    },
    {
      "before": ["<space>"],
      "after": ["@", "q"]
    },
    {
      "before": ["u"],
      "commands": ["undo"]
    },
    {
      "before": ["<c-r>"],
      "commands": ["redo"]
    },
    {
      "before": ["<leader>", "a"],
      "after": ["g", "g", "V", "G"]
    },
    // -- visual lines - Move using visual lines.
    {
      "before": ["j"],
      "after": ["g", "j"]
    },
    {
      "before": ["k"],
      "after": ["g", "k"]
    },
    {
      "before": ["0"],
      "after": ["g", "0"]
    },
    {
      "before": ["$"],
      "after": ["g", "$"]
    },
    // -- visual lines - end
    {
      "before": ["s"],
      "after": ["leader", "leader", "s"]
    },
    {
      "before": ["<c-a>"],
      "after": ["gg", "V", "G"]
    },
    {
      "before": ["<c-p>"],
      "commands": ["workbench.action.quickOpen"]
    },

    // --- calva keybindings - making them more conjure-ish
    {
      // evaluates current form
      // default: ctrl+enter
      "before": [" ", "e", "e"],
      "commands": ["calva.evaluateSelection"]
    },
    {
      // evaluates current top level form
      // default: alt+enter
      "before": [" ", "e", "r"],
      "commands": ["calva.evaluateCurrentTopLevelForm"]
    },
    {
      "before": [" ", "e", "c", "e"],
      "commands": ["calva.evaluateSelectionAsComment"]
    },
    {
      "before": [" ", "e", "c", "r"],
      "commands": ["calva.evaluateTopLevelFormAsComment"]
    },
    {
      "before": [" ", "e", "b"],
      "commands": ["calva.loadFile"]
    },
    {
      "before": ["<a-i>"],
      "commands": ["editor.action.showHover"]
    },
    {
      "before": ["K"],
      "commands": ["calva.printClojureDocsToOutputWindow"]
    },
    {
      "before": [" ", "d", "$"],
      "commands": ["paredit.killListForward"]
    },
    {
      "before": [" ", "d", "0"],
      "commands": ["paredit.killListBackward"]
    },
    {
      "before": [" ", "d", "w"],
      "commands": ["paredit.spliceSexpKillForward"]
    },
    {
      "before": [" ", "d", "b"],
      "commands": ["paredit.spliceSexpKillBackward"]
    },
    {
      // nextcalva
    },
    // --- calva keybindings end

    // The following three commands are mimicking the behavior of Vimium. First
    // one is actually to keep the default J behavior somewhere.
    // {
    //   "before": ["g", "j"],
    //   "after": ["J"]
    // },
    // {
    //   "before": ["J"],
    //   "commands": [":tabp"]
    // },
    // {
    //   "before": ["K"],
    //   "commands": [":tabn"]
    // }
    {
      "before": ["<c-b>"],
      "commands": [""]
    },
    {
      "before": ["|"],
      "commands": ["workbench.action.splitEditor"]
    },
    {
      "before": ["-"],
      "commands": ["workbench.action.splitEditorDown"]
    },
    {
      "before": ["<c-f>"],
      "after": ["/"]
    }
  ],
  // )vimnormal-

  // -vimvisual(
  "vim.visualModeKeyBindingsNonRecursive": [
    // -- visual lines - Move using visual lines.
    {
      "before": ["j"],
      "after": ["g", "j"]
    },
    {
      "before": ["k"],
      "after": ["g", "k"]
    },
    {
      "before": ["0"],
      "after": ["g", "0"]
    },
    {
      "before": ["$"],
      "after": ["g", "$"]
    },
    // -- visual lines - end
    {
      "before": ["<leader>", "s"],
      "commands": [":w"],
      "after": ["<esc>"]
    },
    {
      "before": ["<leader>", "x"],
      "commands": [":x"],
      "after": ["<esc>"]
    },
    {
      "before": ["<leader>", "q"],
      "commands": [":q"],
      "after": ["<esc>"]
    },
    // Prevents `p` from yanking text that is being overwriten. When that
    // behavior is desired, use `gp`.
    {
      "before": ["g", "p"],
      "after": ["p"]
    },
    {
      "before": ["p"],
      "after": ["\"", "_", "d", "P"]
    },
    {
      // search for all occurences of the selected text
      "before": ["/", "/"],
      "after": ["y", "/", "<c-r>", "*", "<cr>"]
    }
    // {
    //   "before": [" ", "E"],
    //   "commands": ["calva.evaluateSelectionToSelectionEnd"]
    // },
  ],
  // )vimvisual-

  "vim.leader": ",",
  // ) vim-

  // -misc (

  "telemetry.telemetryLevel": "off",
  "nxConsole.enableTelemetry": false,
  "problems.showCurrentInStatus": true,
  "remoteHub.commitDirectlyWarning": "off",
  "scm.diffDecorationsGutterWidth": 5,
  "diffEditor.renderSideBySide": true,
  "diffEditor.ignoreTrimWhitespace": false,
  "rubyLsp.rubyVersionManager": "asdf",
  "emmet.includeLanguages": {
    "erb": "html",
    "svelte": "html"
  },
  "emmet.triggerExpansionOnTab": true,
  "github.copilot.editor.enableAutoCompletions": true,
  "github.copilot.enable": {
    "*": false,
    "plaintext": false,
    "markdown": false,
    "scminput": false
  },
  "outline.collapseItems": "alwaysCollapse",
  "haskell.manageHLS": "GHCup",
  "[astro]": {
    "editor.defaultFormatter": "astro-build.astro-vscode"
  },
  "notebook.lineNumbers": "on",
  "search.exclude": {
    ".calva/": true,
    "**/.clj-kondo": true,
    "**/.lsp": true,
    "**/*.code-search": true,
    "**/bower_components": true,
    "**/node_modules": true,
    "**/out": true
  },
  "html.suggest.html5": false,
  "[markdown]": {
    "editor.wordWrap": "bounded",
    "editor.wordWrapColumn": 80,
    "editor.wrappingIndent": "same",
    "editor.rulers": [80, 100, 120],
    "editor.tabSize": 2,
    "editor.insertSpaces": true
  },
  "[asciidoc]": {
    "editor.defaultFormatter": "asciidoctor.asciidoctor-vscode",
    "editor.wordWrap": "bounded",
    "editor.wordWrapColumn": 80,
    "editor.wrappingIndent": "same",
    "editor.rulers": [80, 100, 120],
    "editor.tabSize": 4,
    "editor.insertSpaces": true
  },

  // -fsharp(
  "[fsharp]": {
    "editor.defaultFormatter": "Ionide.Ionide-fsharp",
    "editor.tabSize": 4
  },
  // )fsharp-

  // -clojure(
  "[clojure]": {
    "editor.wordSeparators": "\t ()\"':,;~@#$%^&{}[]`",
    "editor.autoClosingBrackets": "always",
    "editor.autoClosingOvertype": "always",
    "editor.autoClosingQuotes": "always",
    "editor.formatOnType": true,
    "editor.autoIndent": "full",
    "editor.formatOnPaste": true,
    "editor.matchBrackets": "never",
    "editor.guides.indentation": false,
    "editor.parameterHints.enabled": false,
    "editor.unicodeHighlight.allowedCharacters": {
      " ": true,
      "꞉": true
    },
    "editor.foldingStrategy": "indentation",
    "editor.defaultFormatter": "betterthantomorrow.calva"
  },
  // )clojure-

  // snippets(((
  "[snippets]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  // )))snippets

  "[python]": {
    "editor.tabSize": 4,
    "editor.defaultFormatter": "ms-python.black-formatter"
  },
  "javascript.updateImportsOnFileMove.enabled": "never",
  "typescript.tsserver.experimental.enableProjectDiagnostics": true,
  "typescript.updateImportsOnFileMove.enabled": "always",
  "typescript.preferences.importModuleSpecifier": "non-relative",
  "[svelte]": {
    "editor.defaultFormatter": "svelte.svelte-vscode"
  },
  "svelte.enable-ts-plugin": true,
  "go.formatTool": "goimports",
  "vim.enableNeovim": true,
  "vim.neovimUseConfigFile": true,
  "FSharp.inlayHints.parameterNames": false,
  "FSharp.inlayHints.typeAnnotations": false,
  // ) misc-

  // -javascript(
  "[javascript]": {
    "editor.rulers": [100, 120]
  },
  "[javascriptreact]": {
    "editor.rulers": [100, 120]
  },
  "editor.minimap.enabled": false,
  "[cpp]": {
    "editor.defaultFormatter": "ms-vscode.cpptools"
  },
  "C_Cpp.clang_format_fallbackStyle": "Google",
  "C_Cpp.clang_format_sortIncludes": true,
  "C_Cpp.clang_format_style": "Google",
  "workbench.activityBar.location": "hidden",
  "javascript.preferences.importModuleSpecifierEnding": "js",
  "emmet.showExpandedAbbreviation": "inMarkupAndStylesheetFilesOnly",
  "emmet.showSuggestionsAsSnippets": true,
  "editor.screenReaderAnnounceInlineSuggestion": false,
  "editor.snippetSuggestions": "bottom"
}

// #region Ligature description
//
// Ligature description, according to ChatGPT:
//
// ---
// In Visual Studio Code, the `editor.fontLigatures` option can be customized
// using an array of strings, each representing a specific typographic
// feature. Here are some common options:
//
// 1. **`liga`**: Standard ligatures.
// 2. **`dlig`**: Discretionary ligatures.
// 3. **`clig`**: Contextual ligatures.
// 4. **`hlig`**: Historical ligatures.
// 5. **`calt`**: Contextual alternates.
// 6. **`ss01`** to **`ss20`**: Stylistic sets.
// 7. **`salt`**: Stylistic alternates.
// 8. **`zero`**: Slashed zero.
//
// These options allow you to fine-tune which ligatures and typographic
// features are enabled in the editor.
//
// For more detailed information, refer to the OpenType feature tags:
//   https://docs.microsoft.com/en-us/typography/opentype/spec/featurelist
//
// ---
//
// Seems to be possible to remove a particular ligature by using the ["-zero"]
// syntax.
//
// #endregion
